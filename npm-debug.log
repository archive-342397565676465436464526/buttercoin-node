0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/bin/node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@1.4.21
3 info using node@v0.10.30
4 verbose publish [ '.' ]
5 verbose cache add [ '.', null ]
6 verbose cache add name=undefined spec="." args=[".",null]
7 verbose parsed url { protocol: null,
7 verbose parsed url   slashes: null,
7 verbose parsed url   auth: null,
7 verbose parsed url   host: null,
7 verbose parsed url   port: null,
7 verbose parsed url   hostname: null,
7 verbose parsed url   hash: null,
7 verbose parsed url   search: null,
7 verbose parsed url   query: null,
7 verbose parsed url   pathname: '.',
7 verbose parsed url   path: '.',
7 verbose parsed url   href: '.' }
8 silly lockFile 3a52ce78- .
9 verbose lock . /Users/kevin/.npm/3a52ce78-.lock
10 verbose tar pack [ '/Users/kevin/.npm/buttercoinsdk-node/0.0.5/package.tgz',
10 verbose tar pack   '.' ]
11 verbose tarball /Users/kevin/.npm/buttercoinsdk-node/0.0.5/package.tgz
12 verbose folder .
13 info prepublish buttercoinsdk-node@0.0.5
14 silly lockFile 1f1177db-tar tar://.
15 verbose lock tar://. /Users/kevin/.npm/1f1177db-tar.lock
16 silly lockFile fb77dd57-ercoinsdk-node-0-0-5-package-tgz tar:///Users/kevin/.npm/buttercoinsdk-node/0.0.5/package.tgz
17 verbose lock tar:///Users/kevin/.npm/buttercoinsdk-node/0.0.5/package.tgz /Users/kevin/.npm/fb77dd57-ercoinsdk-node-0-0-5-package-tgz.lock
18 silly lockFile 1f1177db-tar tar://.
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile fb77dd57-ercoinsdk-node-0-0-5-package-tgz tar:///Users/kevin/.npm/buttercoinsdk-node/0.0.5/package.tgz
21 silly lockFile fb77dd57-ercoinsdk-node-0-0-5-package-tgz tar:///Users/kevin/.npm/buttercoinsdk-node/0.0.5/package.tgz
22 silly lockFile b9985ada-buttercoinsdk-node-0-0-5-package /Users/kevin/.npm/buttercoinsdk-node/0.0.5/package
23 verbose lock /Users/kevin/.npm/buttercoinsdk-node/0.0.5/package /Users/kevin/.npm/b9985ada-buttercoinsdk-node-0-0-5-package.lock
24 silly lockFile b9985ada-buttercoinsdk-node-0-0-5-package /Users/kevin/.npm/buttercoinsdk-node/0.0.5/package
25 silly lockFile b9985ada-buttercoinsdk-node-0-0-5-package /Users/kevin/.npm/buttercoinsdk-node/0.0.5/package
26 silly lockFile 3a52ce78- .
27 silly lockFile 3a52ce78- .
28 silly publish { name: 'buttercoinsdk-node',
28 silly publish   version: '0.0.5',
28 silly publish   description: 'Official Buttercoin API lib for node.js',
28 silly publish   homepage: 'https://github.com/buttercoin/buttercoinsdk-node',
28 silly publish   author: { name: 'Kevin Adams', email: 'kevin@buttercoin.com' },
28 silly publish   bugs: { url: 'https://github.com/buttercoin/buttercoinsdk-node/issues' },
28 silly publish   license: 'MIT',
28 silly publish   main: 'index.js',
28 silly publish   directories: { test: 'tests' },
28 silly publish   scripts: { test: 'mocha' },
28 silly publish   repository:
28 silly publish    { type: 'git',
28 silly publish      url: 'git://github.com/buttercoin/buttercoinsdk-node.git' },
28 silly publish   keywords:
28 silly publish    [ 'bitcoin',
28 silly publish      'buttercoin',
28 silly publish      'trading platform',
28 silly publish      'cryptocurrency',
28 silly publish      'digital currency',
28 silly publish      'btc' ],
28 silly publish   dependencies: { request: '~2.36.0', qs: '~0.6.6' },
28 silly publish   devDependencies: { mocha: '~1.20.1', should: '~4.0.4', nock: '~0.36.2' },
28 silly publish   readme: 'Buttercoin Node SDK Client\n===============\n\nOfficial Node Client of the Buttercoin API.  Buttercoin is a trading platform that makes buying and selling bitcoin easy.\n\n## Getting Started\n\nUse npm to install\n\n```javascript\nnpm install buttercoinsdk-node\n```\n\n## Examples\n\n### Initialization\n\nSetting | Property Name | Description\n--- | --- | ---\nPublic Key | `publicKey` | Your Buttercoin API Public Key  \nSecret Key | `secretKey` | Your Buttercoin API Secret Key  \nEnvironment | `environment` | Your development environment (default: `\'production\'`, set to `\'staging\'` to test with testnet bitcoins)\nAPI Version | `version` | The API Version.  Currently used to version the API URL and Service Description\n\n```javascript\n// Configure Buttercoin instance.  Only apiKey and apiSecret are required.\n\n// The environment parameter defaults to the \'production\' environment.\n\n// The version parameter defaults to the latest version as of this release, \'v1\'\n\nvar client = require(\'buttercoinsdk-node\')(\'<api_key>\', \'<api_secret>\', \'<environment>\', \'<version>\');\n```\n\n**Tips**\n\nA note on the `timestamp` param sent to all client methods:\nThis param must always be increasing, and within 5 minutes of Buttercoin server times (GMT). This is to prevent replay attacks on your data.\n\nBecause of this, if you need your API calls to run in a certain order, you must chain together callbacks to ensure synchronous responses to your requests.\n\n```\nvar timestamp = new Date().getTime();\n```\n\n*Additionally, for convenience, if you don\'t include the timestamp parameter, it will default to the current timestamp.*\n\n```\nclient.getKey(function (err, key) {\n  // do something amazing!\n});\n```\n\n### Get Data\n\n**Key Permissions**  \nReturns `array` of permissions associated with this key\n\n```javascript\nclient.getKey(new Date().getTime(), function (err, key) {\n  console.log("key err", err);\n  console.log("key", key);\n});\n```\n\n**Balances**  \nReturns `array` of balances for this account\n\n```javascript\nclient.getBalances(new Date().getTime(), function (err, balances) {\n  console.log("balances err", err);\n  console.log("balances", balances);\n});\n```\n\n**Deposit Address**  \nReturns bitcoin address `string` to deposit your funds into the Buttercoin platform\n\n```javascript\nclient.getDepositAddress(new Date().getTime(), function (err, address) {\n  console.log("address err", err);\n  console.log("address", address);\n});\n```\n\n**Get Orders**  \nReturns `array` of `JSON Objects` containing information about buy and sell orders\n\nName | Param | Description\n--- | --- | ---\nStatus | `status` | enum: `[\'opened\', \'partial-filled\', \'filled\', \'canceled\']`  \nSide | `side` | enum: `[\'buy\', \'sell\']`  \nOrder Type | `orderType` | enum: `[\'market\', \'limit\']`  \nDate Min | `dateMin` | format: ISO-8601, e.g. `\'2014-05-06T13:15:30Z\'`  \nDate Max | `dateMax` | format: ISO-8601, e.g. `\'2014-05-06T13:15:30Z\'`  \n\n```javascript\n// query for multiple orders\nvar orderParams = { side: \'sell\' };\n// the query parameter is optional and can be omitted for convenience to search all orders\nclient.getOrders(orderParams, new Date().getTime(), function (err, orders) {\n  console.log("orders err", err);\n  console.log("orders", orders);\n});\n\n// single order by id\nvar orderId = \'<order_id>\';\n\nclient.getOrderById(orderId, new Date().getTime(), function (err, orders) {\n  console.log("order err", err);\n  console.log("single order", orders);\n});\n\n// single order by url\nvar url = \'<url>\';\n\nclient.getOrderByUrl(url, new Date().getTime(), function (err, orders) {\n  console.log("order err", err);\n  console.log("single order", orders);\n});\n```\n\n**Get Transactions**  \nReturns `array` of `JSON Objects` containing information about deposit and withdraw action\n\nName | Param | Description\n--- | --- | ---\nStatus | `status` | enum: `[\'pending\', \'processing\', \'funded\', \'canceled\', \'failed\']`  \nTransaction Type | `transactionType` | enum: `[\'deposit\', \'withdrawal\']`  \nDate Min | `dateMin` | format: ISO-8601, e.g. `\'2014-05-06T13:15:30Z\'`  \nDate Max | `dateMax` | format: ISO-8601, e.g. `\'2014-05-06T13:15:30Z\'`  \n\n```javascript\n// query for multiple transactions\nvar trxnParams = {};\n// the query parameter is optional and can be omitted for convenience to search all trxns\nclient.getTransactions(trxnParams, new Date().getTime(), function (err, orders) {\n  console.log("trxn err", err);\n  console.log("trxn", orders);\n});\n\n// single transaction by id\nvar trxnId = \'53a22ce164f23e7301a4fee5\';\n\nclient.getTransaction(trxnId, new Date().getTime(), function (err, transaction) {\n  console.log("single trxn err", err);\n  console.log("single trxn", transaction);\n});\n\n// single transaction by url\nvar url = \'https://api.buttercoin.com/v1/transactions/53e539aa64f23ec123931c11\';\n\nclient.getTransaction(url, new Date().getTime(), function (err, transaction) {\n  console.log("single trxn err", err);\n  console.log("single trxn", transaction);\n});\n```\n\n###### Unauthenticated Requests\n\n**Get Order Book**  \nReturn an `array` of current orders in the Buttercoin order book\n\n```javascript\nclient.getOrderbook(function (err, orderBook) {\n  console.log("order book err", err);\n  console.log("order book", orderBook);\n});\n```\n\n**Get Ticker**  \nReturn the current bid, ask, and last sell prices on the Buttercoin platform\n\n```javascript\nclient.getTicker(function (err, ticker) {\n  console.log("ticker err", err);\n  console.log("ticker", ticker);\n});\n```\n\n### Create New Actions\n\n**Create Order**\n\nValid order params include:\n\nName | Param | Description\n--- | --- | ---\nInstrument | `instrument` | enum: `[\'BTC_USD, USD_BTC\']`\nSide | `side` | enum: `[\'buy\', \'sell\']`, required `true`  \nOrder Type | `orderType` | enum: `[\'limit\', \'market\']`, required `true`  \nPrice | `price` | `string`, required `false`  \nQuantity | `quantity` | `string`, required `false`\n\n```javascript\n// create a JSON object with the following params\nvar order = {\n  instrument: "BTC_USD",\n  orderAction: "buy",\n  orderType: "limit",\n  price: "700.00"\n  quantity: "5"\n};\n\nclient.createOrder(order, new Date().getTime(), function (err, order) {\n  console.log("create order err", err);\n  console.log("create order", order);\n});\n```\n\n**Create Transaction**  \n\nDeposit transaction params include:  \n\nName | Param | Description\n--- | --- | ---\nMethod | `method` | enum: `[\'wire\']`, required `true`  \nCurrency | `currency` | enum: `[\'USD\']`, required `true`  \nAmount | `amount` | `string`, required `true`  \n\n```javascript\n// create deposit\nvar trxnObj = {\n  method: "wire",\n  currency: "USD",\n  amount: "5002"\n};\n\nclient.createDeposit(trxnObj, new Date().getTime(), function (err, trxn) {\n  console.log("create trxn err", err);\n  console.log("create trxn", trxn);\n});\n```\n\nWithdrawal transaction params include:  \n\nName | Param | Description\n--- | --- | --- \nMethod | `method` | enum: `[\'check\']`, required `true`  \nCurrency | `currency` | enum: `[\'USD\']`, required `true`  \nAmount | `amount` | `string`, required `true`\n\n```javascript\n// create withdrawal\nvar trxnObj = {\n  method: "check",\n  currency: "USD",\n  amount: "100"\n};\n\nclient.createWithdrawal(trxnObj, new Date().getTime(), function (err, trxn) {\n  console.log("create trxn err", err);\n  console.log("create trxn", trxn);\n});\n```\nSend bitcoin transaction params include:  \n\nName | Param | Description\n--- | --- | --- \nCurrency | `currency` | `[\'USD\']`, required `true`  \nAmount | `amount` | `string`, required `true`  \nDestination | `destination` | address to which to send currency `string`, required `true`   \n\n```javascript\n// send bitcoins to an address\nvar trxnObj = {\n  currency: "BTC",\n  amount: "100.231231",\n  destination: "<bitcoin_address>"\n};\n\nclient.sendBitcoin(trxnObj, new Date().getTime(), function (err, trxn) {\n  console.log("create trxn err", err);\n  console.log("create trxn", trxn);\n});\n```\n\n\n### Cancel Actions\n\nAll successful cancel calls to the API return a response status of `204` with a human readable success message\n\n**Cancel Order**  \nCancel a pending buy or sell order\n\n```javascript\nclient.cancelOrder(orderId, new Date().getTime(), function (err, msg) {\n  console.log("cancel order err", err);\n  console.log("cancel order", msg);\n});\n```\n\n**Cancel Transaction**  \nCancel a pending deposit or withdraw action\n\n```javascript\nclient.cancelTransaction(trxnId, new Date().getTime(), function (err, msg) {\n  console.log("cancel trxn err", err);\n  console.log("cancel trxn", msg);\n});\n```\n\n## Further Reading\n\n[Buttercoin - Website](https://www.buttercoin.com)  \n[Buttercoin API Docs](https://developer.buttercoin.com)\n\n## Contributing\n\nThis is an open source project and we love involvement from the community! Hit us up with pull requests and issues. \n\nThe aim is to take your great ideas and make everyone\'s experience using Buttercoin even more powerful. The more contributions the better!\n\n## Release History\n\n### 0.0.1\n\n- First release.\n\n### 0.0.2\n\n- Added support for unauthenticated requests\n- Fixed README format and accuracy\n\n### 0.0.3\n\n- Fixed issue with orderbook returning null\n\n### 0.0.4\n\n- Fixed issue with self not defined\n\n### 0.0.6\n\n- Made timestamp an optional parameter (will default to current timestamp)\n- Made getOrders and getTransactions query params optional\n\n## License\n\nLicensed under the MIT license.\n\n',
28 silly publish   readmeFilename: 'README.md',
28 silly publish   gitHead: 'd64b07798fc7325045ec20c619c3fe5d8d3346b6',
28 silly publish   _id: 'buttercoinsdk-node@0.0.5',
28 silly publish   _shasum: '24fd679be94e2305fa700ae642c8778fec9c2d36',
28 silly publish   _from: '.' }
29 verbose request where is /buttercoinsdk-node
30 verbose request registry https://registry.npmjs.org/
31 verbose request id 441aa071ce75b4a2
32 verbose url raw /buttercoinsdk-node
33 verbose url resolving [ 'https://registry.npmjs.org/', './buttercoinsdk-node' ]
34 verbose url resolved https://registry.npmjs.org/buttercoinsdk-node
35 verbose request where is https://registry.npmjs.org/buttercoinsdk-node
36 info trying registry request attempt 1 at 12:58:42
37 http PUT https://registry.npmjs.org/buttercoinsdk-node
38 http 403 https://registry.npmjs.org/buttercoinsdk-node
39 verbose headers { date: 'Sun, 10 Aug 2014 19:58:37 GMT',
39 verbose headers   server: 'CouchDB/1.5.0 (Erlang OTP/R14B04)',
39 verbose headers   'content-type': 'application/json',
39 verbose headers   'cache-control': 'max-age=60',
39 verbose headers   'content-length': '14324',
39 verbose headers   'accept-ranges': 'bytes',
39 verbose headers   via: '1.1 varnish',
39 verbose headers   'x-served-by': 'cache-lax1424-LAX',
39 verbose headers   'x-cache': 'MISS',
39 verbose headers   'x-cache-hits': '0',
39 verbose headers   'x-timer': 'S1407700717.387269,VS0,VE289',
39 verbose headers   'keep-alive': 'timeout=10, max=50',
39 verbose headers   connection: 'Keep-Alive' }
40 error publish Failed PUT 403
41 error Error: forbidden cannot modify pre-existing version: 0.0.5
41 error old={"name":"buttercoinsdk-node","version":"0.0.5","description":"Official Buttercoin API lib for node.js","homepage":"https://github.com/buttercoin/buttercoinsdk-node","author":{"name":"Kevin Adams","email":"kevin@buttercoin.com"},"bugs":{"url":"https://github.com/buttercoin/buttercoinsdk-node/issues"},"license":"MIT","main":"index.js","directories":{"test":"tests"},"scripts":{"test":"mocha"},"repository":{"type":"git","url":"git://github.com/buttercoin/buttercoinsdk-node.git"},"keywords":["bitcoin","buttercoin","trading platform","cryptocurrency","digital currency","btc"],"dependencies":{"request":"~2.36.0","qs":"~0.6.6"},"devDependencies":{"mocha":"~1.20.1","should":"~4.0.4","nock":"~0.36.2"},"gitHead":"d64b07798fc7325045ec20c619c3fe5d8d3346b6","_id":"buttercoinsdk-node@0.0.5","_shasum":"24fd679be94e2305fa700ae642c8778fec9c2d36","_from":".","_npmVersion":"1.4.21","_npmUser":{"name":"kevin-buttercoin","email":"kevin@buttercoin.com"},"maintainers":[{"name":"kevin-buttercoin","email":"kevin@buttercoin.com"}],"dist":{"shasum":"24fd679be94e2305fa700ae642c8778fec9c2d36","tarball":"http://registry.npmjs.org/buttercoinsdk-node/-/buttercoinsdk-node-0.0.5.tgz"}}
41 error new={"name":"buttercoinsdk-node","version":"0.0.5","description":"Official Buttercoin API lib for node.js","homepage":"https://github.com/buttercoin/buttercoinsdk-node","author":{"name":"Kevin Adams","email":"kevin@buttercoin.com"},"bugs":{"url":"https://github.com/buttercoin/buttercoinsdk-node/issues"},"license":"MIT","main":"index.js","directories":{"test":"tests"},"scripts":{"test":"mocha"},"repository":{"type":"git","url":"git://github.com/buttercoin/buttercoinsdk-node.git"},"keywords":["bitcoin","buttercoin","trading platform","cryptocurrency","digital currency","btc"],"dependencies":{"request":"~2.36.0","qs":"~0.6.6"},"devDependencies":{"mocha":"~1.20.1","should":"~4.0.4","nock":"~0.36.2"},"readme":"Buttercoin Node SDK Client\u000a===============\u000a\u000aOfficial Node Client of the Buttercoin API.  Buttercoin is a trading platform that makes buying and selling bitcoin easy.\u000a\u000a## Getting Started\u000a\u000aUse npm to install\u000a\u000a```javascript\u000anpm install buttercoinsdk-node\u000a```\u000a\u000a## Examples\u000a\u000a### Initialization\u000a\u000aSetting | Property Name | Description\u000a--- | --- | ---\u000aPublic Key | `publicKey` | Your Buttercoin API Public Key  \u000aSecret Key | `secretKey` | Your Buttercoin API Secret Key  \u000aEnvironment | `environment` | Your development environment (default: `'production'`, set to `'staging'` to test with testnet bitcoins)\u000aAPI Version | `version` | The API Version.  Currently used to version the API URL and Service Description\u000a\u000a```javascript\u000a// Configure Buttercoin instance.  Only apiKey and apiSecret are required.\u000a\u000a// The environment parameter defaults to the 'production' environment.\u000a\u000a// The version parameter defaults to the latest version as of this release, 'v1'\u000a\u000avar client = require('buttercoinsdk-node')('<api_key>', '<api_secret>', '<environment>', '<version>');\u000a```\u000a\u000a**Tips**\u000a\u000aA note on the `timestamp` param sent to all client methods:\u000aThis param must always be increasing, and within 5 minutes of Buttercoin server times (GMT). This is to prevent replay attacks on your data.\u000a\u000aBecause of this, if you need your API calls to run in a certain order, you must chain together callbacks to ensure synchronous responses to your requests.\u000a\u000a```\u000avar timestamp = new Date().getTime();\u000a```\u000a\u000a*Additionally, for convenience, if you don't include the timestamp parameter, it will default to the current timestamp.*\u000a\u000a```\u000aclient.getKey(function (err, key) {\u000a  // do something amazing!\u000a});\u000a```\u000a\u000a### Get Data\u000a\u000a**Key Permissions**  \u000aReturns `array` of permissions associated with this key\u000a\u000a```javascript\u000aclient.getKey(new Date().getTime(), function (err, key) {\u000a  console.log(\"key err\", err);\u000a  console.log(\"key\", key);\u000a});\u000a```\u000a\u000a**Balances**  \u000aReturns `array` of balances for this account\u000a\u000a```javascript\u000aclient.getBalances(new Date().getTime(), function (err, balances) {\u000a  console.log(\"balances err\", err);\u000a  console.log(\"balances\", balances);\u000a});\u000a```\u000a\u000a**Deposit Address**  \u000aReturns bitcoin address `string` to deposit your funds into the Buttercoin platform\u000a\u000a```javascript\u000aclient.getDepositAddress(new Date().getTime(), function (err, address) {\u000a  console.log(\"address err\", err);\u000a  console.log(\"address\", address);\u000a});\u000a```\u000a\u000a**Get Orders**  \u000aReturns `array` of `JSON Objects` containing information about buy and sell orders\u000a\u000aName | Param | Description\u000a--- | --- | ---\u000aStatus | `status` | enum: `['opened', 'partial-filled', 'filled', 'canceled']`  \u000aSide | `side` | enum: `['buy', 'sell']`  \u000aOrder Type | `orderType` | enum: `['market', 'limit']`  \u000aDate Min | `dateMin` | format: ISO-8601, e.g. `'2014-05-06T13:15:30Z'`  \u000aDate Max | `dateMax` | format: ISO-8601, e.g. `'2014-05-06T13:15:30Z'`  \u000a\u000a```javascript\u000a// query for multiple orders\u000avar orderParams = { side: 'sell' };\u000a// the query parameter is optional and can be omitted for convenience to search all orders\u000aclient.getOrders(orderParams, new Date().getTime(), function (err, orders) {\u000a  console.log(\"orders err\", err);\u000a  console.log(\"orders\", orders);\u000a});\u000a\u000a// single order by id\u000avar orderId = '<order_id>';\u000a\u000aclient.getOrderById(orderId, new Date().getTime(), function (err, orders) {\u000a  console.log(\"order err\", err);\u000a  console.log(\"single order\", orders);\u000a});\u000a\u000a// single order by url\u000avar url = '<url>';\u000a\u000aclient.getOrderByUrl(url, new Date().getTime(), function (err, orders) {\u000a  console.log(\"order err\", err);\u000a  console.log(\"single order\", orders);\u000a});\u000a```\u000a\u000a**Get Transactions**  \u000aReturns `array` of `JSON Objects` containing information about deposit and withdraw action\u000a\u000aName | Param | Description\u000a--- | --- | ---\u000aStatus | `status` | enum: `['pending', 'processing', 'funded', 'canceled', 'failed']`  \u000aTransaction Type | `transactionType` | enum: `['deposit', 'withdrawal']`  \u000aDate Min | `dateMin` | format: ISO-8601, e.g. `'2014-05-06T13:15:30Z'`  \u000aDate Max | `dateMax` | format: ISO-8601, e.g. `'2014-05-06T13:15:30Z'`  \u000a\u000a```javascript\u000a// query for multiple transactions\u000avar trxnParams = {};\u000a// the query parameter is optional and can be omitted for convenience to search all trxns\u000aclient.getTransactions(trxnParams, new Date().getTime(), function (err, orders) {\u000a  console.log(\"trxn err\", err);\u000a  console.log(\"trxn\", orders);\u000a});\u000a\u000a// single transaction by id\u000avar trxnId = '53a22ce164f23e7301a4fee5';\u000a\u000aclient.getTransaction(trxnId, new Date().getTime(), function (err, transaction) {\u000a  console.log(\"single trxn err\", err);\u000a  console.log(\"single trxn\", transaction);\u000a});\u000a\u000a// single transaction by url\u000avar url = 'https://api.buttercoin.com/v1/transactions/53e539aa64f23ec123931c11';\u000a\u000aclient.getTransaction(url, new Date().getTime(), function (err, transaction) {\u000a  console.log(\"single trxn err\", err);\u000a  console.log(\"single trxn\", transaction);\u000a});\u000a```\u000a\u000a###### Unauthenticated Requests\u000a\u000a**Get Order Book**  \u000aReturn an `array` of current orders in the Buttercoin order book\u000a\u000a```javascript\u000aclient.getOrderbook(function (err, orderBook) {\u000a  console.log(\"order book err\", err);\u000a  console.log(\"order book\", orderBook);\u000a});\u000a```\u000a\u000a**Get Ticker**  \u000aReturn the current bid, ask, and last sell prices on the Buttercoin platform\u000a\u000a```javascript\u000aclient.getTicker(function (err, ticker) {\u000a  console.log(\"ticker err\", err);\u000a  console.log(\"ticker\", ticker);\u000a});\u000a```\u000a\u000a### Create New Actions\u000a\u000a**Create Order**\u000a\u000aValid order params include:\u000a\u000aName | Param | Description\u000a--- | --- | ---\u000aInstrument | `instrument` | enum: `['BTC_USD, USD_BTC']`\u000aSide | `side` | enum: `['buy', 'sell']`, required `true`  \u000aOrder Type | `orderType` | enum: `['limit', 'market']`, required `true`  \u000aPrice | `price` | `string`, required `false`  \u000aQuantity | `quantity` | `string`, required `false`\u000a\u000a```javascript\u000a// create a JSON object with the following params\u000avar order = {\u000a  instrument: \"BTC_USD\",\u000a  orderAction: \"buy\",\u000a  orderType: \"limit\",\u000a  price: \"700.00\"\u000a  quantity: \"5\"\u000a};\u000a\u000aclient.createOrder(order, new Date().getTime(), function (err, order) {\u000a  console.log(\"create order err\", err);\u000a  console.log(\"create order\", order);\u000a});\u000a```\u000a\u000a**Create Transaction**  \u000a\u000aDeposit transaction params include:  \u000a\u000aName | Param | Description\u000a--- | --- | ---\u000aMethod | `method` | enum: `['wire']`, required `true`  \u000aCurrency | `currency` | enum: `['USD']`, required `true`  \u000aAmount | `amount` | `string`, required `true`  \u000a\u000a```javascript\u000a// create deposit\u000avar trxnObj = {\u000a  method: \"wire\",\u000a  currency: \"USD\",\u000a  amount: \"5002\"\u000a};\u000a\u000aclient.createDeposit(trxnObj, new Date().getTime(), function (err, trxn) {\u000a  console.log(\"create trxn err\", err);\u000a  console.log(\"create trxn\", trxn);\u000a});\u000a```\u000a\u000aWithdrawal transaction params include:  \u000a\u000aName | Param | Description\u000a--- | --- | --- \u000aMethod | `method` | enum: `['check']`, required `true`  \u000aCurrency | `currency` | enum: `['USD']`, required `true`  \u000aAmount | `amount` | `string`, required `true`\u000a\u000a```javascript\u000a// create withdrawal\u000avar trxnObj = {\u000a  method: \"check\",\u000a  currency: \"USD\",\u000a  amount: \"100\"\u000a};\u000a\u000aclient.createWithdrawal(trxnObj, new Date().getTime(), function (err, trxn) {\u000a  console.log(\"create trxn err\", err);\u000a  console.log(\"create trxn\", trxn);\u000a});\u000a```\u000aSend bitcoin transaction params include:  \u000a\u000aName | Param | Description\u000a--- | --- | --- \u000aCurrency | `currency` | `['USD']`, required `true`  \u000aAmount | `amount` | `string`, required `true`  \u000aDestination | `destination` | address to which to send currency `string`, required `true`   \u000a\u000a```javascript\u000a// send bitcoins to an address\u000avar trxnObj = {\u000a  currency: \"BTC\",\u000a  amount: \"100.231231\",\u000a  destination: \"<bitcoin_address>\"\u000a};\u000a\u000aclient.sendBitcoin(trxnObj, new Date().getTime(), function (err, trxn) {\u000a  console.log(\"create trxn err\", err);\u000a  console.log(\"create trxn\", trxn);\u000a});\u000a```\u000a\u000a\u000a### Cancel Actions\u000a\u000aAll successful cancel calls to the API return a response status of `204` with a human readable success message\u000a\u000a**Cancel Order**  \u000aCancel a pending buy or sell order\u000a\u000a```javascript\u000aclient.cancelOrder(orderId, new Date().getTime(), function (err, msg) {\u000a  console.log(\"cancel order err\", err);\u000a  console.log(\"cancel order\", msg);\u000a});\u000a```\u000a\u000a**Cancel Transaction**  \u000aCancel a pending deposit or withdraw action\u000a\u000a```javascript\u000aclient.cancelTransaction(trxnId, new Date().getTime(), function (err, msg) {\u000a  console.log(\"cancel trxn err\", err);\u000a  console.log(\"cancel trxn\", msg);\u000a});\u000a```\u000a\u000a## Further Reading\u000a\u000a[Buttercoin - Website](https://www.buttercoin.com)  \u000a[Buttercoin API Docs](https://developer.buttercoin.com)\u000a\u000a## Contributing\u000a\u000aThis is an open source project and we love involvement from the community! Hit us up with pull requests and issues. \u000a\u000aThe aim is to take your great ideas and make everyone's experience using Buttercoin even more powerful. The more contributions the better!\u000a\u000a## Release History\u000a\u000a### 0.0.1\u000a\u000a- First release.\u000a\u000a### 0.0.2\u000a\u000a- Added support for unauthenticated requests\u000a- Fixed README format and accuracy\u000a\u000a### 0.0.3\u000a\u000a- Fixed issue with orderbook returning null\u000a\u000a### 0.0.4\u000a\u000a- Fixed issue with self not defined\u000a\u000a### 0.0.6\u000a\u000a- Made timestamp an optional parameter (will default to current timestamp)\u000a- Made getOrders and getTransactions query params optional\u000a\u000a## License\u000a\u000aLicensed under the MIT license.\u000a\u000a","readmeFilename":"README.md","gitHead":"d64b07798fc7325045ec20c619c3fe5d8d3346b6","_id":"buttercoinsdk-node@0.0.5","_shasum":"24fd679be94e2305fa700ae642c8778fec9c2d36","_from":".","_npmVersion":"1.4.21","_npmUser":{"name":"kevin-buttercoin","email":"kevin@buttercoin.com"},"maintainers":[{"name":"kevin-buttercoin","email":"kevin@buttercoin.com"}],"dist":{"shasum":"24fd679be94e2305fa700ae642c8778fec9c2d36","tarball":"http://registry.npmjs.org/buttercoinsdk-node/-/buttercoinsdk-node-0.0.5.tgz"}}: buttercoinsdk-node
41 error     at RegClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:300:14)
41 error     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:238:65)
41 error     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:123:22)
41 error     at Request.emit (events.js:98:17)
41 error     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:893:14)
41 error     at Request.emit (events.js:117:20)
41 error     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:844:12)
41 error     at IncomingMessage.emit (events.js:117:20)
41 error     at _stream_readable.js:938:16
41 error     at process._tickCallback (node.js:419:13)
42 error If you need help, you may report this *entire* log,
42 error including the npm and node versions, at:
42 error     <http://github.com/npm/npm/issues>
43 error System Darwin 13.3.0
44 error command "/usr/local/bin/node" "/usr/local/bin/npm" "publish"
45 error cwd /Users/kevin/Projects/buttercoinsdk-node
46 error node -v v0.10.30
47 error npm -v 1.4.21
48 verbose exit [ 1, true ]
